# Task ID: 8
# Title: Implement Knowledge Graph API Endpoints
# Status: done
# Dependencies: 5
# Priority: medium
# Description: Create API endpoints for knowledge graph operations using LightRAG.
# Details:
Implement the /api/v1/graph endpoint for knowledge graph operations. Create methods for retrieving graph structure, adding relationships, and performing graph traversals. Define request and response models for graph operations. Ensure all operations use the user-specific LightRAG instance. Implement visualization-friendly response formats for graph data.

# Test Strategy:
Test graph endpoints with various input parameters. Verify graph operations correctly modify or retrieve data from LightRAG. Test with different user instances to ensure data isolation. Verify graph data is correctly formatted for visualization.

# Subtasks:
## 1. Define Knowledge Graph API Models and Schemas [done]
### Dependencies: None
### Description: Create Pydantic models for all knowledge graph entities, relationships, and API request/response schemas to ensure proper validation and serialization.
### Details:
Implementation details:
1. Create base models for nodes, edges, and properties using Pydantic
2. Define request models for operations (create, update, search, traverse)
3. Define response models with visualization-friendly formats (JSON-LD compatible)
4. Implement field selection capability in response models
5. Add validation rules to ensure data integrity
6. Create documentation strings for OpenAPI/Swagger

Testing approach:
- Unit test each model with valid and invalid data
- Verify serialization/deserialization works correctly
- Test field selection functionality

Example code:
```python
from pydantic import BaseModel, Field
from typing import Dict, List, Optional, Any

class GraphNode(BaseModel):
    id: str
    label: str
    properties: Dict[str, Any] = Field(default_factory=dict)

class GraphEdge(BaseModel):
    source: str
    target: str
    type: str
    properties: Dict[str, Any] = Field(default_factory=dict)

class GraphResponse(BaseModel):
    nodes: List[GraphNode]
    edges: List[GraphEdge]
    
    class Config:
        schema_extra = {
            "example": {
                "nodes": [{"id": "1", "label": "Person", "properties": {"name": "John"}}],
                "edges": [{"source": "1", "target": "2", "type": "KNOWS", "properties": {}}]
            }
        }
```

## 2. Implement Graph Structure Retrieval Endpoints [done]
### Dependencies: 8.1
### Description: Create API endpoints for retrieving knowledge graph structure, including nodes, edges, and subgraphs with filtering and pagination support.
### Details:
Implementation details:
1. Create GET `/api/v1/graph` endpoint to retrieve the full graph structure
2. Implement GET `/api/v1/graph/nodes` endpoint with filtering by label and properties
3. Implement GET `/api/v1/graph/edges` endpoint with filtering by type
4. Add pagination support using limit/offset query parameters
5. Implement field selection via query parameters
6. Ensure all endpoints use the user-specific LightRAG instance

Testing approach:
- Test with various filter combinations
- Verify pagination works correctly
- Test with large datasets to ensure performance
- Verify field selection reduces response size appropriately

Example code:
```python
from fastapi import FastAPI, Depends, Query, HTTPException
from typing import List, Optional
from .models import GraphNode, GraphEdge, GraphResponse
from .dependencies import get_user_lightrag

app = FastAPI()

@app.get("/api/v1/graph", response_model=GraphResponse)
def get_graph(
    limit: int = Query(10, ge=1, le=100),
    offset: int = Query(0, ge=0),
    fields: Optional[str] = None,
    lightrag = Depends(get_user_lightrag)
):
    # Get graph data from user's LightRAG instance
    nodes, edges = lightrag.get_graph(limit=limit, offset=offset)
    
    # Apply field selection if specified
    if fields:
        field_list = fields.split(",")
        # Filter fields logic here
    
    return GraphResponse(nodes=nodes, edges=edges)
```

## 3. Implement Graph Modification Endpoints [done]
### Dependencies: 8.1
### Description: Create API endpoints for adding, updating, and deleting nodes and relationships in the knowledge graph.
### Details:
Implementation details:
1. Implement POST `/api/v1/graph/nodes` to create new nodes
2. Implement POST `/api/v1/graph/edges` to create new relationships
3. Implement PUT/PATCH endpoints for updating nodes and edges
4. Implement DELETE endpoints for removing nodes and edges
5. Add transaction support to ensure data consistency
6. Return appropriate status codes (201 for creation, 204 for deletion)

Testing approach:
- Test CRUD operations individually
- Test error handling for invalid inputs
- Test transaction rollback on failure
- Verify proper status codes are returned

Example code:
```python
@app.post("/api/v1/graph/nodes", response_model=GraphNode, status_code=201)
def create_node(
    node: GraphNode,
    lightrag = Depends(get_user_lightrag)
):
    try:
        created_node = lightrag.create_node(node.dict())
        return created_node
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.delete("/api/v1/graph/nodes/{node_id}", status_code=204)
def delete_node(
    node_id: str,
    lightrag = Depends(get_user_lightrag)
):
    try:
        lightrag.delete_node(node_id)
        return None
    except KeyError:
        raise HTTPException(status_code=404, detail="Node not found")
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))
```

## 4. Implement Graph Traversal and Search Endpoints [done]
### Dependencies: 8.1, 8.2
### Description: Create API endpoints for traversing the graph, finding paths between nodes, and performing semantic searches within the knowledge graph.
### Details:
Implementation details:
1. Implement GET `/api/v1/graph/traverse` endpoint for graph traversal operations
2. Create GET `/api/v1/graph/paths` endpoint to find paths between nodes
3. Implement GET `/api/v1/graph/search` for semantic search within the graph
4. Add query parameters for controlling traversal depth and direction
5. Implement filtering by node types and edge types
6. Ensure efficient traversal algorithms are used

Testing approach:
- Test traversal with different depths and directions
- Test path finding between various node pairs
- Benchmark performance with large graphs
- Test semantic search with various queries

Example code:
```python
@app.get("/api/v1/graph/traverse", response_model=GraphResponse)
def traverse_graph(
    start_node: str,
    direction: str = Query("outbound", enum=["outbound", "inbound", "any"]),
    max_depth: int = Query(2, ge=1, le=5),
    edge_types: Optional[str] = None,
    lightrag = Depends(get_user_lightrag)
):
    edge_type_list = edge_types.split(",") if edge_types else None
    
    subgraph = lightrag.traverse(
        start_node=start_node,
        direction=direction,
        max_depth=max_depth,
        edge_types=edge_type_list
    )
    
    return GraphResponse(nodes=subgraph["nodes"], edges=subgraph["edges"])

@app.get("/api/v1/graph/search", response_model=GraphResponse)
def search_graph(
    query: str,
    limit: int = Query(10, ge=1, le=100),
    lightrag = Depends(get_user_lightrag)
):
    results = lightrag.search(query=query, limit=limit)
    return GraphResponse(nodes=results["nodes"], edges=results["edges"])
```

## 5. Implement Visualization-Friendly Response Formats and Documentation [done]
### Dependencies: 8.1, 8.2, 8.3, 8.4
### Description: Enhance API responses with visualization-friendly formats and create comprehensive API documentation using OpenAPI/Swagger.
### Details:
Implementation details:
1. Implement JSON-LD compatible response format for interoperability
2. Add specialized visualization endpoints that return data in formats compatible with common graph visualization libraries (D3.js, Cytoscape.js)
3. Create custom response serializers for different visualization formats
4. Implement content negotiation to support multiple response formats
5. Create comprehensive OpenAPI documentation with examples
6. Add rate limiting and caching headers for performance

Testing approach:
- Verify response formats work with visualization libraries
- Test content negotiation with different Accept headers
- Validate JSON-LD responses against schema
- Test documentation endpoints return valid OpenAPI specs

Example code:
```python
from fastapi import Response, Header
from typing import Optional

@app.get("/api/v1/graph/visualize", response_model=None)
def get_visualization_data(
    format: str = Query("d3", enum=["d3", "cytoscape", "jsonld"]),
    lightrag = Depends(get_user_lightrag),
    accept: Optional[str] = Header(None)
):
    # Get graph data
    graph_data = lightrag.get_graph()
    
    # Determine format based on Accept header or query param
    if accept and "application/ld+json" in accept:
        format = "jsonld"
    
    # Format data according to requested visualization format
    if format == "d3":
        response_data = format_for_d3(graph_data)
        return response_data
    elif format == "cytoscape":
        response_data = format_for_cytoscape(graph_data)
        return response_data
    elif format == "jsonld":
        response_data = format_for_jsonld(graph_data)
        return Response(
            content=response_data,
            media_type="application/ld+json"
        )

def format_for_d3(graph_data):
    # Transform to D3.js format
    return {
        "nodes": [{"id": n.id, "label": n.label, **n.properties} for n in graph_data["nodes"]],
        "links": [{"source": e.source, "target": e.target, "type": e.type} for e in graph_data["edges"]]
    }
```

