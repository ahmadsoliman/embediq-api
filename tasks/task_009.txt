# Task ID: 9
# Title: Implement Data Source Configuration API
# Status: done
# Dependencies: 6
# Priority: low
# Description: Create API endpoints for configuring external data sources.
# Details:
Implement the /api/v1/datasources endpoint for configuring external data sources. Create methods for adding, updating, and removing data source configurations. Define request and response models for data source operations. Ensure configurations are stored in the user's working directory. Implement validation for different data source types.

# Test Strategy:
Test data source configuration endpoints with various input parameters. Verify configurations are correctly stored in user-specific directories. Test validation of different data source types. Verify configurations persist across application restarts.

# Subtasks:
## 1. Define Data Source Configuration Models [done]
### Dependencies: None
### Description: Create Pydantic models for data source configurations that support different types of data sources and include proper validation. These models will be used for request/response handling and validation throughout the API.
### Details:
1. Create a base DataSourceConfig Pydantic model with common fields:
   - id (UUID, auto-generated)
   - name (required, string)
   - type (required, string - e.g., 'postgres', 'mysql', 'csv', 'api')
   - description (optional, string)
   - created_at and updated_at timestamps
2. Create specific models for each data source type that inherit from the base model:
   - DatabaseDataSource (for SQL databases with connection string, username, password fields)
   - FileDataSource (for CSV, JSON files with path, format fields)
   - APIDataSource (for REST APIs with url, auth_type, headers fields)
3. Implement validation logic for each model type (e.g., validate connection strings, file paths)
4. Ensure sensitive fields like passwords use SecretStr type for security
5. Add helper methods for serialization/deserialization
6. Write unit tests for model validation with various input scenarios

## 2. Implement Configuration Storage Service [done]
### Dependencies: 9.1
### Description: Create a service layer to handle the storage and retrieval of data source configurations in the user's working directory. This service will handle persistence, encryption of sensitive data, and file operations.
### Details:
1. Create a ConfigurationStorageService class with methods for CRUD operations:
   - save_config(config: DataSourceConfig) -> DataSourceConfig
   - get_config(config_id: str) -> DataSourceConfig
   - list_configs() -> List[DataSourceConfig]
   - update_config(config_id: str, config: DataSourceConfig) -> DataSourceConfig
   - delete_config(config_id: str) -> None
2. Implement file-based storage in the user's working directory:
   - Use a subdirectory like '.datasources' in the user's working directory
   - Store each configuration as a separate JSON file named by its ID
   - Use the 'cryptography' library to encrypt sensitive fields before storage
3. Handle file locking for concurrent access
4. Implement error handling for file operations (permissions, disk space)
5. Add logging for operations (excluding sensitive data)
6. Write unit tests with mocked file system
7. Ensure backward compatibility for configuration format changes

## 3. Create Data Source Validation Service [done]
### Dependencies: 9.1
### Description: Implement a service to validate data source configurations by testing connections and verifying access permissions. This ensures that stored configurations are valid and usable.
### Details:
1. Create a DataSourceValidationService with methods for different data source types:
   - validate_database_connection(config: DatabaseDataSource) -> ValidationResult
   - validate_file_access(config: FileDataSource) -> ValidationResult
   - validate_api_endpoint(config: APIDataSource) -> ValidationResult
2. Implement connection testing logic for each data source type:
   - For databases: Establish connection, run simple query, check permissions
   - For files: Check file existence, read permissions, parse header
   - For APIs: Send test request, verify response format
3. Create a ValidationResult model with fields for success status, error messages, and warnings
4. Implement timeout handling to prevent long-running validation attempts
5. Add detailed error messages for common configuration issues
6. Create mock data sources for testing without actual external dependencies
7. Write integration tests for each validation method with test data sources

## 4. Implement Data Source Configuration API Endpoints [done]
### Dependencies: 9.1, 9.2, 9.3
### Description: Create the RESTful API endpoints for managing data source configurations, following best practices for API design, error handling, and security.
### Details:
1. Implement the following endpoints using FastAPI:
   - POST /api/v1/datasources - Create new data source configuration
   - GET /api/v1/datasources - List all data source configurations
   - GET /api/v1/datasources/{id} - Get specific data source configuration
   - PUT /api/v1/datasources/{id} - Update data source configuration
   - DELETE /api/v1/datasources/{id} - Delete data source configuration
   - POST /api/v1/datasources/{id}/validate - Validate a data source configuration
2. Add proper request/response models using the Pydantic models from subtask 1
3. Implement filtering, sorting, and pagination for the list endpoint
4. Add proper error handling with appropriate HTTP status codes
5. Implement authentication and authorization middleware
6. Add rate limiting to prevent abuse
7. Ensure sensitive data is never returned in responses (mask credentials)
8. Document API endpoints using OpenAPI/Swagger annotations
9. Write integration tests for each endpoint

## 5. Implement Data Source Type Registry and Extension System [done]
### Dependencies: 9.1, 9.3, 9.4
### Description: Create a registry system that allows for adding new data source types and their specific validation logic. This makes the system extensible for future data source types.
### Details:
1. Create a DataSourceTypeRegistry class to manage available data source types:
   - register_type(type_name: str, model_class, validator_class) -> None
   - get_type(type_name: str) -> Tuple[model_class, validator_class]
   - list_types() -> List[str]
2. Implement a plugin system to load data source type definitions from external modules
3. Create an extension interface with required methods for new data source types:
   - get_type_name() -> str
   - get_model_class() -> Type[DataSourceConfig]
   - get_validator_class() -> Type[Validator]
   - get_connection_parameters() -> List[Dict]
4. Update API endpoints to use the registry for validation and model selection
5. Add an endpoint to discover available data source types:
   - GET /api/v1/datasources/types - List all supported data source types and their parameters
6. Create documentation for extending the system with new data source types
7. Implement at least one additional data source type as an example extension
8. Write tests for the registry and extension loading system

